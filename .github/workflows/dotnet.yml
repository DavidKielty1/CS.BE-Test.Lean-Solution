name: .NET Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore Dependencies
        run: dotnet restore API.sln

      - name: Build Solution
        run: dotnet build API.sln --configuration Debug --no-restore

      - name: Ensure Coverage Directory Exists
        run: mkdir -p coverage

      - name: Run Tests with Coverage
        run: dotnet test Tests/API.Tests/API.Tests.csproj --no-build --verbosity normal -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:CoverletOutput=./coverage/cobertura.xml

      - name: Debug List All Files After Tests
        run: ls -R ./coverage || echo "❌ No coverage directory found"

      - name: Verify Test Coverage
        run: |
          COVERAGE_FILE="./coverage/cobertura.xml"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage file not found at $COVERAGE_FILE. Failing build."
            exit 1
          fi
          echo "✅ Found coverage file at $COVERAGE_FILE"
          COVERAGE=$(grep -oP '(?<=<coverage line-rate=")[0-9.]+' "$COVERAGE_FILE")
          if (( $(echo "$COVERAGE < 0.8" | bc -l) )); then
            echo "❌ Test coverage ($COVERAGE) is below 80%. Failing the build."
            exit 1
          else
            echo "✅ Test coverage is $COVERAGE, passing."
          fi

      - name: Generate Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: "TestResults/Coverage/coverage.cobertura.xml"
          targetdir: "coveragereport"
          reporttypes: "HtmlInline;Cobertura"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport
